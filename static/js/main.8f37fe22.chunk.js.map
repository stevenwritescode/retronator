{"version":3,"sources":["components/RetroCard.jsx","containers/Board/index.jsx","App.js","serviceWorker.js","index.js"],"names":["styles","makeStyles","theme","root","flexGrow","padding","card","position","display","alignItems","arrow","flex","cardContent","leftIcons","bottom","left","rightIcons","right","KanbanCard","props","classes","column","handlers","handleAddVote","handleRemoveTask","handleMoveTask","handleEditTask","columnIndex","index","cards","map","cardIndex","react_default","a","createElement","Paper","key","className","IconButton","onClick","ChevronLeft","Typography","content","all","length","ChevronRight","aria-label","color","size","hasVote","ThumbUp","fontSize","ThumbUpOutlined","variant","votes","Edit","Delete","RetroBoard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleAddColumn","columns","state","randomHex","Math","floor","random","toString","newColumnName","window","prompt","concat","newColumnColor","newColumn","id","name","headerColor","setState","handleEditColumn","handleRemoveColumn","splice","handleAddCard","total","newCardContent","i","totalCards","newCard","push","newTask","direction","JSON","parse","localStorage","getItem","setItem","stringify","_this2","_this$handlers","Button","addButton","Add","Grid","container","spacing","item","xs","columnHeader","style","backgroundColor","align","columnHeaderText","editButton","RetroCard","objectSpread","React","Component","withStyles","justifyContent","top","margin","App","Fragment","Board","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f37fe22.chunk.js","sourcesContent":["//react imports\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport { IconButton, Paper, Typography as Text } from \"@material-ui/core\";\nimport { ChevronLeft, ChevronRight, Edit, Delete, ThumbUp, ThumbUpOutlined } from \"@material-ui/icons\";\n\nconst styles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    padding: 25,\n  },\n  card: {\n    padding: \"8px 8px 24px 8px\",\n    position: \"relative\",\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  arrow: {\n    flex: \"0 1 auto\",\n  },\n  cardContent: {\n    padding: 8,\n    flex: \"1 1 auto\",\n  },\n  leftIcons: {\n    position: \"absolute\",\n    bottom: 5,\n    left: 5,\n  },\n  rightIcons: {\n    position: \"absolute\",\n    bottom: 5,\n    right: 5,\n  },\n}));\n\nfunction KanbanCard(props) {\n  const classes = styles();\n  const { column, handlers } = props;\n  const { handleAddVote, handleRemoveTask, handleMoveTask, handleEditTask } = handlers;\n  const columnIndex = column.index;\n  return column.cards.map((card, cardIndex) => {\n    return (\n      <Paper key={cardIndex} className={classes.card}>\n        {columnIndex > 0 && (\n          <IconButton onClick={() => handleMoveTask(card, columnIndex, cardIndex, \"left\")}>\n            <ChevronLeft className={classes.arrow} />\n          </IconButton>\n        )}\n        <Text className={classes.cardContent}>{card.content}</Text>\n        {columnIndex < column.all.length - 1 && (\n          <IconButton onClick={() => handleMoveTask(card, columnIndex, cardIndex, \"right\")}>\n            <ChevronRight className={classes.arrow} />\n          </IconButton>\n        )}\n        <div className={classes.leftIcons}>\n          <IconButton aria-label=\"Edit\" color=\"inherit\" onClick={() => handleAddVote(columnIndex, cardIndex)} size=\"small\">\n            {card.hasVote ? <ThumbUp fontSize=\"inherit\" /> : <ThumbUpOutlined fontSize=\"inherit\" />}\n          </IconButton>\n          <Text variant=\"overline\">{card.votes || 0}</Text>\n        </div>\n        <div className={classes.rightIcons}>\n          <IconButton aria-label=\"Edit\" color=\"inherit\" onClick={() => handleEditTask(columnIndex, cardIndex)} size=\"small\">\n            <Edit fontSize=\"inherit\" />\n          </IconButton>\n          <IconButton aria-label=\"Delete\" color=\"inherit\" onClick={() => handleRemoveTask(columnIndex, cardIndex)} size=\"small\">\n            <Delete fontSize=\"inherit\" />\n          </IconButton>\n        </div>\n      </Paper>\n    );\n  });\n}\n\nexport default KanbanCard;\n","//react imports\nimport React from \"react\";\nimport { withStyles } from \"@material-ui/styles\";\nimport { Button, Grid, IconButton, Paper, Typography as Text } from \"@material-ui/core\";\nimport RetroCard from \"../../components/RetroCard\";\nimport { Add, Edit, Delete } from \"@material-ui/icons\";\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n    padding: \"0 25px\",\n  },\n  columnHeader: {\n    color: \"#FFF\",\n    position: \"relative\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  card: {\n    padding: 8,\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  arrow: {\n    flex: \"0 1 auto\",\n  },\n  cardContent: {\n    padding: 8,\n    flex: \"1 1 auto\",\n  },\n  editButton: {\n    position: \"absolute\",\n    top: 0,\n    right: 10,\n  },\n  addButton: {\n    margin: \"10px 0\",\n  },\n});\n\nclass RetroBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [\n        {\n          id: 0,\n          name: \"What Went Well\",\n          headerColor: \"#4CAF50\",\n          cards: [],\n        },\n        {\n          id: 1,\n          name: \"What needed improvement\",\n          headerColor: \"#F44336\",\n          cards: [],\n        },\n        {\n          id: 2,\n          name: \"Ideas\",\n          headerColor: \"#3F51B5\",\n          cards: [],\n        },\n        {\n          id: 3,\n          name: \"Action Items\",\n          headerColor: \"#673AB7\",\n          cards: [],\n        },\n      ],\n    };\n  }\n\n  componentDidMount() {\n    const columns = JSON.parse(localStorage.getItem(\"retroBoard\"));\n    if (columns) {\n      this.setState({ columns });\n    }\n  }\n\n  componentDidUpdate() {\n    const { columns } = this.state;\n    localStorage.setItem(\"retroBoard\", JSON.stringify(columns));\n  }\n\n  handlers = {\n    handleAddColumn: () => {\n      const { columns } = this.state;\n      const randomHex = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n      const newColumnName = window.prompt(\"Column Name:\", `Column ${columns.length + 1}`);\n      const newColumnColor = window.prompt(\"Column Background Color (Hexadecimal):\", randomHex);\n      const newColumn = {\n        id: columns.length,\n        name: newColumnName,\n        headerColor: newColumnColor,\n        cards: [],\n      };\n\n      if (newColumnName && newColumnName.length > 0) {\n        columns[columns.length] = newColumn;\n        this.setState({ columns });\n      }\n    },\n\n    handleEditColumn: index => {\n      const { columns } = this.state;\n      const newColumnName = window.prompt(\"Column Name:\", columns[index].name);\n      const newColumnColor = window.prompt(\"Column Background Color (Hexadecimal):\", columns[index].headerColor);\n      if (newColumnName && newColumnName.length > 0) {\n        columns[index].name = newColumnName;\n        columns[index].headerColor = newColumnColor;\n        this.setState({ columns });\n      }\n    },\n\n    handleRemoveColumn: columnIndex => {\n      const { columns } = this.state;\n      columns.splice(columnIndex, 1);\n      this.setState({ columns });\n    },\n\n    handleAddCard: (column, index) => {\n      const { columns } = this.state;\n      let total = 0;\n      const totalCards = () => {\n        for (var i = 0; i < columns.length; i++) {\n          total = total + columns[i].cards.length;\n        }\n        return total;\n      };\n      const newCardContent = window.prompt(\"Card Name:\", `Card ${totalCards() + 1}`);\n      const newCard = {\n        id: column.cards.length,\n        content: newCardContent,\n      };\n\n      if (newCardContent && newCardContent.length > 0) {\n        columns[index].cards.push(newCard);\n        this.setState({ columns });\n      }\n    },\n\n    handleEditTask: (columnIndex, cardIndex) => {\n      const { columns } = this.state;\n      const cardContent = columns[columnIndex].cards[cardIndex].content;\n      const newTask = window.prompt(\"Card Name:\", cardContent);\n\n      if (newTask && newTask.length > 0) {\n        columns[columnIndex].cards[cardIndex].content = newTask;\n        this.setState({ columns });\n      }\n    },\n\n    handleMoveTask: (card, columnIndex, cardIndex, direction) => {\n      const { columns } = this.state;\n      if (direction === \"left\") {\n        columns[columnIndex - 1].cards.push(card);\n      } else if (direction === \"right\") {\n        columns[columnIndex + 1].cards.push(card);\n      }\n      columns[columnIndex].cards.splice(cardIndex, 1);\n      this.setState({ columns });\n    },\n\n    handleRemoveTask: (columnIndex, cardIndex) => {\n      const { columns } = this.state;\n      columns[columnIndex].cards.splice(cardIndex, 1);\n      this.setState({ columns });\n    },\n\n    handleAddVote: (columnIndex, cardIndex) => {\n      const { columns } = this.state;\n      let card = columns[columnIndex].cards[cardIndex];\n      if (!card.votes) {\n        card.votes = 0;\n        card.votes += 1;\n        card.hasVote = true;\n      } else {\n        card.votes -= 1;\n        card.hasVote = false;\n      }\n      this.setState({ columns });\n    },\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { columns } = this.state;\n    const { handleAddColumn, handleEditColumn, handleRemoveColumn, handleAddCard } = this.handlers;\n\n    return (\n      <div className={classes.root}>\n        <Button color=\"secondary\" variant=\"contained\" onClick={() => handleAddColumn()} className={classes.addButton}>\n          <Add />\n        </Button>\n        <Grid container direction=\"row\" spacing={3}>\n          {columns.map((column, columnIndex) => {\n            return (\n              <Grid key={columnIndex} item xs={3} className={classes.column}>\n                <Paper id=\"column\">\n                  <Paper className={classes.columnHeader} style={{ backgroundColor: column.headerColor }}>\n                    <Text align=\"center\" className={classes.columnHeaderText}>\n                      {column.name}\n                    </Text>\n                    <div className={classes.editButton}>\n                      <IconButton aria-label=\"Edit\" color=\"inherit\" onClick={() => handleEditColumn(columnIndex)} size=\"small\">\n                        <Edit fontSize=\"inherit\" />\n                      </IconButton>\n                      <IconButton aria-label=\"Delete\" color=\"inherit\" onClick={() => handleRemoveColumn(columnIndex)} size=\"small\">\n                        <Delete fontSize=\"inherit\" />\n                      </IconButton>\n                    </div>\n                  </Paper>\n                  <RetroCard column={{ index: columnIndex, all: columns, ...column }} handlers={this.handlers} />\n                </Paper>\n                <Button color=\"secondary\" variant=\"contained\" onClick={() => handleAddCard(column, columnIndex)} className={classes.addButton}>\n                  <Add />\n                </Button>\n              </Grid>\n            );\n          })}\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(RetroBoard);\n","//react imports\nimport React from \"react\";\nimport RetroBoard from \"./containers/Board\";\nimport { Typography as Text } from \"@material-ui/core\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div style={{ backgroundColor: \"#EEE\", color: \"#AAA\", padding:'0 25px' }}><Text variant=\"overline\">Retronator</Text></div>\n      <RetroBoard />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}